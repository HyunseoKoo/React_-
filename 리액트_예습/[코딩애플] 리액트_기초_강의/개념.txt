유튜브 _ 코딩애플 [React 기초강의]

1강: 리액트 설치와 셋팅법 (2022+ 스타일)

    1. Node.js 검색 후 최신버전 설치
    2. Visual Studio Code 에디터 설치
    3. 코드 짤 폴더 만듦
    4. 에디터에서 작업폴더 오픈
    5. 리액트 프로젝트 생성 - [터미널] 열고 아래 명령어 입력
        npx create-react-app 프로젝트명     => 리액트 셋팅 다된 boilerplate 만들기 쉽게 도와주는 라이브러리
    6. 프로젝트명의 하위폴더를 다시 오픈해서 코딩
    7. 터미널을 통해 미리보기 확인 => [터미널] 에서 프로젝트 폴더 cd 후 아래 명령어 입력
        npm start 
    
    +)
    1. Node.js 설치 이유? 
        create-react-app 라이브러리 사용하기 위함
        nodejs 설치하면 npm이라는 툴 이용가능
        npm으로 create-react-app 이용했음
    
    2. src/App.js:  메인페이지에 들어갈 HTML 짜는 곳
       public/index.html이 메인페이지
       src/index.js가 App.js를 index.html에 들어갈수 있도록 해줌

       App.js ----------------------> index.html
                     index.js 파일 덕분에 App.js가 index.html에서 작동할수 있음      (document.getElemnetById('root')라는게 있음)
    3. node_modules : 라이브러리 모은 폴더
    4. public: static 파일 보관함 (동적인 것들 _ favicon, img)
    5. src: 소스코드 보관함
    6. package.json: 설치한 라이브러리 목록      => npm 으로 라이브러리 설치할때마다 자동으로 기록됨
    7. 

-----------------------------------------------------------------------------------------------------------------------------------------

2강: 리액트에선 HTML 대신 JSX 사용 (JSX 사용법)

    [JSX 문법]

    1. 태그에 class를 주고싶으면?
       <div className="클래스명">
    
    2. 리액트에서 데이터 바인딩 쉽게할 수 있음. [리액트의 가장 큰 장점]
       (데이터 바인딩: 서버에서 데이터를 받아온 다음, js로 저장후 html에 넣어서 표시하는 것)

        { 변수명, 함수 등 }
        
        { 변수명 }      => document.queryselector('') 이런식으로 안하고 직관적으로 변수를 가져올수 있음.
        src, id, href, className 등의 속성에도 { 변수명, 함수 등 }

    3. JSX에서 style 속성 집어넣을 때
       style={object 자료형으로 만든 스타일}
       카멜식(camelCase) 작명관습에 따라 속성명을 바꿔줘야함 (ex. fontSize)

-----------------------------------------------------------------------------------------------------------------------------------------

3강: 리액트에선 변수말고 state 사용 (useState)

데이터는
1. 변수에 넣거나
2. state에 넣거나

[리액트의 데이터 저장공간 _ state 만드는 법]
1. {useState}상단에 첨부
2. useState(데이터)

state는
1. 변수 대신 쓰는 데이터 저장공간
2. useState()를 이용해 만들어아야함
   let [글제목, 글제목변경] = useState('남자 코트 추천');
   let [a, b] => 변수 2개로 항상 맞춰줘야함! useState()안에 [state데이터, state데이터 변경 함수] array가 남기 때문!
3. 문자, 숫자, array, object 다 저장가능

state에 데이터 저장해놓는 이유:
    웹이 App처럼 동작하게 만들고 싶기 때문
    state는 변경되면 HTML이 자동으로 재렌더링 됨

    let posts = '강남 고기 맛집';
      => 그냥 변수는 내용이 변경되어도 자동 재렌더링 안됨
    let [글제목2, 글제목변경2] = useState(['남자 코트 추천', '강남 우동 맛집']);
      => state에 데이터 저장하게 되면 제목을 정렬하든가 제목을 수정하든가 새로고침 없이도 HTML에 재랜더링됨
    
    ** 자주 바뀌는, 중요한 데이터는 변수 말고 state로 저장해서 쓰세요! (변경이 잦고 재랜더링이 스무스하게 되게하고 싶으면 state 사용!)


 숙제: 블로그 글 리스트 UI 완성하기 (제목 내용은 state 이용)

-----------------------------------------------------------------------------------------------------------------------------------------

4강 : 리액트에서 버튼에 이벤트 리스너(핸들러) 장착하는 법

1. 이벤트 다루는 법
   onClick={클릭될 때 실행할 함수}
   onClick={ ()=> {실행할 내용} }

2. state의 변경함수
function App() {
    let [따봉, 따봉변경] = useState(0);
    <span onClick={() => { 따봉변경(따봉 + 1); 👍</span>
    }
    //  이모티콘을 누를때마다 따봉표시 숫자가 +1 됨 => state 만들때 같이 만들었던 따봉변경()이라는 이 state 변경 함수의 역할

-----------------------------------------------------------------------------------------------------------------------------------------

5강 : state 맘대로 변겨하는 법 (setState는 옛날 방식)

6강 
1. Component 유의사항
   1. 이름은 대괄호
   2. return()안에 있는건 태그하나로 묶어야함
   3. return() 내부를 묶을 때 의미없는 <div> 쓰기 싫으면 <></>

2. 어떤걸 component로 만드는게 좋을까
   마음에 드는 부분을 잘라서  Component 만들어도 전혀 상관없음
   - 반복출현하는 HTML 덩어리들
   - 자주 변경되는 HTML UI들 (재랜더링 되는 것들)
   - 다른 페이지 만들 때도 컴포넌트로 만듦

3. Component 많이 만들면 단점 : 
   - state 쓸 때 복잡해짐
   (상위 Component에서 만든 state 쓰려면 props 문법 이용해야함)