Q1. 리액트를 사용하는 이유를 설명해보세요 (2가지 이상)
    - 복잡한 사용자 ui를 쉽게 구축하기 위해
    - 기능을 컴포넌트 단위로 관리하기 위해
    

Q2. (Q1)을 통해 얻을 수 있는 장점은 무엇일까요?
    - 컴포넌트 관리를 통해 유지보수가 쉬워짐 [폴더 정리를 통해 컴포넌트 코드 접근이 용이]
    - 랜더링 최적화 메모리 용량 아낄수 있음


Q3. 리액트가 가상 돔을 사용하는 이유는 무엇일까요?
    - 개발자만 확인해야 하는 함수의 연산 과정을 화면에 보이지 않게 하기 위함 => 결국 랜더링 최적화
    - 랜더링 하는 과정에서 변화된 코드만 감지하여 화면에 보여주는 작업을 하기 위함

Q4. 리액트가 가상 돔과 돔 트리를 비교하여 바뀐 부분이 있다면 화면을 다시 그리는 행위를 무엇이라 할까요?
    - 랜더링 / 리랜더링


Q5. (Q3)의 행위를 통해 얻을 수 있는 이점은 무엇일까요?
    - 상태가 변화된 가상돔과 진짜돔을 비교하고, 변화된 컴포넌트만 리랜더링 화면에 보여주자! (기본적인 리액트의 구동원리와 사용 이유!)


Q6. (Q3)은 리액트에서 어느 순간에 실현될까요?
    - state 변화를 감지할 때 (랜더링 시 기존 코드에서 변화가 감지되는 순간)

Q7. 훅 함수는 왜 만들게 되었을까요?
    아래의 훅 함수는 각 언제 선언되어야 할까요?
    (1) useState : 변수에 새로운 값이 재선언 되어 변경된 값을 화면에 랜더링하고 싶을 때
    (2) useRef : 랜더링 되더라도 지정된 변수 값을 초기화 하지 않고 랜더링 이전 값을 유지하고 싶을 때
    (3) useEffect : [의존배열] 값이 변경될 때에만 지정 변수 값을 변화시켜 랜더링 하고 싶을 때
    (4) useCallback : 특정 함수를 저장해놨다가 랜더링 된 후 해당 함수를 재사용하고 싶을 때 
    (5) useMemo : 연산된 결과 값을 저장하고 있다가 랜더링 되도 해당 값을 재사용 하고 싶을때 {객체}

Q8. 커스텀 훅을 제작하면서 얻을 수 있는 이점은 무엇이고 어느 때 만들어야 할까요?
    - 이점 => 원하는 형태의 hook함수를 만들어서 쓰고 싶을 때 전역에서 자유롭게 사용할 수 있음 [어디서나 재사용 가능]
    - 이벤트 함수 기능이 필요한 경우(?) ex. useInput의 onChange 이벤트와 같이 이벤트 함수가 필요할 때 


Q9. 리액트로 프로젝트를 만들려고할 때 고려해야하는 사항들을 아는대로 작성해보세요 (3가지 이상)
    - 랜더링 최적화
    - 폴더구조 (컴포넌트 단위) 설정
    - 컨벤션 (styled-component / 함수명 / 전역 style 관리 ..)

Q10. 만약 위의 질문에 모두 답을 했다면, 현재 부족한 것은 리액트가 아닌 자바스크립트 일 수 있습니다
    이전 풀어보았던 자바스크립트 API 문제 1~4와 board 문제를 현재 풀이할 수 있는지 확인해보세요
    
    react로 풀이를 한다고 가정했을 때와 (직접 바꿔보지는 말 것, 예제 문제와 유사)
    vanilla js(java script)로 풀이한다고 하였때 와의 차이점은 무엇일까요?

    * 위 문제를 받지 못한 수강생은 메일 전송 시 따로 첨부하여 송부

    -
    -
    

Q11. 리액트에서 컴포넌트를 나누는 기준은 어떻게 되어야할까요?
     또한, 이러한 관점은 개발자마다 다를 수 있는데 왜 그럴까요?

     - 추후에 컴포넌트 사용 마크업 주위에 추가 기능이 발생할 경우, 내용 추가 및 수정이 편리한지를 고려해야 함
     - 
