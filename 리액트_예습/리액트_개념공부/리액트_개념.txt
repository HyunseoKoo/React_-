// https://tech.weperson.com/wedev/frontend/csr-ssr-spa-mpa-pwa/#spa-mpa-%E1%84%8B%E1%85%A5%E1%86%AB%E1%84%8C%E1%85%A6-%E1%84%86%E1%85%AE%E1%84%8B%E1%85%A5%E1%86%BA%E1%84%8B%E1%85%B3%E1%86%AF-%E1%84%89%E1%85%A5%E1%86%AB%E1%84%90%E1%85%A2%E1%86%A8%E1%84%92%E1%85%A2%E1%84%8B%E1%85%A3-%E1%84%92%E1%85%A1%E1%84%82%E1%85%B3%E1%86%AB-%E1%84%80%E1%85%A5%E1%86%BA%E1%84%8B%E1%85%B5%E1%86%AB%E1%84%80%E1%85%A1

[CSR(Client Side Rendering)]
: JS 프레임워크를 쓴다고 가정했을때, 각 프레임워크 문법에 맞게 코딩하고 빌드를 하게 되면 최종적으로는 브라우저가 이해 할 수 있는 HTML, CSS, JS 형태의 파일이 
아웃풋으로 나오게 되고 이를 웹서버에 FTP든, 터미널이든 올리기만 하면 됨
React, Vue, Angular 무슨 프레임 워크이든 동일
이때 웹서버는 아주 단순히 올려놓은 파일을 전달해주는 전달자 역할만! 
브라우저는 웹서버로부터 다운받은 파일을 그냥 실행 할 뿐이고 JS파일을 실행하면서 DOM에 내용을 추가하면서 그림.

초기에 JS를 읽어서 무엇을 그려야 할지를 판단하고 그리는 작업을 하는 동안 딜레이 발생
반면에 이후 작업에 있어서는 서버의 의존도가 없이 클라이언트 혼자 그릴 수 있으므로 빠른 화면 전환이나 인터랙션(interaction)이 가능
index.html 에 단순히 뼈대만 있기 때문에 검색 엔진의 봇들이 크롤링(crawling)할 때 아무 내용이 없어서 SEO에 취약

[SSR(Server Side Rendering)]
: SSR은 HTML, CSS, JS를 직접 올리는 것이 아니라 해당 파일들을 만들어 낼 수 있는 로직을 올리고 서버에서 해당 로직을 실행해서 최종적으로 HTML, CSS, JS를 만들어 브라우저에 전달
 만들어진 HTML 파일에는 이미 DOM이 다 구성
 로직을 올린다는 것은 결국 실행 가능한 Function을 올린다는 것이고 이는 백엔드 프레임워크에 해당
 백엔드가 Spring 기반이면 Java 소스를 올리는 것이고, django는 Python, Node.js는 JavaScript 소스를 올려서 실행
=>
SSR은 브라우저에서 보는 파일을 올리는 것이 아니고 브라우저에서 보는 파일을 만들어 낼 수 있는 로직을 포함한 파일을 서버에 올려서 해당 파일을 만들어 내는구나!

이미 DOM 이 다 구성된 파일을 브라우저가 받기 때문에 바로 그릴수가 있어서 초기 구동 속도가 빠름
DOM에 이미 내용이 다 차있기 때문에 검색 엔진들이 정보를 수집할때 정확한 정보를 가져갈 수 있어서 SEO에 좋음

[CSR vs SSR 정리]
: CSR이 초기 구동이 늣고 SSR이 빠르다?
JS 기반 프레임워크는 CSR이든 SSR이든 주최가 다를 뿐이지 누군가는 JS를 읽어서 DOM을 구성해야 함.
만약에 서버가 오래된 팬티엄이고 내 PC가 i9 최신 모델이면 서버에서 JS를 읽어서 구성하는 것보다 내 PC가 JS를 읽어서 구성하는 것이 훨씬 더 빠름.
게다가 서버는 다수를 상대함으로 수백~수천의 유저에게 DOM을 구성하여 보내주어야 하지만 내 PC는 내꺼 하나만 구성하면 됨.
서버에서는 캐싱을 적용 할 수 있지 않냐고 반문 할 수 있고, 실제로도 SSR은 주로 캐싱과 함께 구현을 하긴 하지만,
이는 정적인 컨텐츠가 많은 경우에만 유효한 것이고 동적인 컨텐츠가 많다고 하면 결국 캐싱을 활용도가 떨어지고 서버에 그대로 부담.

CSR은 SEO에 취약하다?
CSR이 SEO에 취약한것은 사실이나 그 전에 앞서 내 서비스 전체가 SEO가 필요한가를 고민해봐야 함.
모든 서비스가 다 SEO가 필요한 것이 아닙니다. 어떤 서비스는 고객의 데이터를 보호하기 위해 SEO가 일어나지 않게끔 해야 함.
공개되야 하는 퍼블릭 데이터만 SEO가 필요할 뿐이지 모든 데이터가 SEO가 필요하지 않음.

잘 언급되지 않는 비용 문제
CSR로 구성 할 경우 S3 같은 단순 스토리지에 올리고 전면에 Cloud Front로 구성하여 캐싱과 레이턴시를 줄이고 트레픽 비용만 지불
SSR의 경우 매번 서버에서 로직을 실행하는 비용 추가하게 됨. 동적 컨텐츠가 많은 경우 캐싱도 무효화
인스턴스를 Auto Scale 하거나 Serverless 기반에 Function을 사용하더라도 CSR과 비교해서 비용이 수백~수천배까지 차이가 날 수 있음.
얘기하고자 하는 것은 CSR, SSR을 단순비교하여 뭐가 빠르고 좋다라기 보다는 내 프로젝트나 서비스 구성에 맞는 방법을 사용해야 함
고객의 데이터를 보호해야 하는 경우나 비용이 민감할 경우 CSR를 택할 수 있고, 정적 콘텐츠와 퍼블릭 데이터가 많은 경우에는 SSR을 선택하는 것이 좋고, 두 가지를 섞어서 서비스를 구성해야 할 수도 있음.


re-rendering

[spa / mpa]
SPA는 어떤 페이지를 접속하더라도 HTML, CSS, JS 동일한 파일 하나만 접속한 페이지에 맞게 화면을 구성
MPA는 페이지 별로 해당 페이지에 맞는 HTML, CSS, JS 파일을 받아서 화면을 구성

building

webpack
: 옛날 자바스크립트는 모듈 개념이 없었기 때문에 파일이 나누어져 있어도 변수 스코프를 생각하면서 개발을 해야했음.
이른 문제를 해결하기 위해 최신 자바스크립트부터는 모듈 개념이 생김. 하지만 지원을안해주는 브라우저들도 있기 때문에 브라우저들이 지원할 수 있는 코드로 변환해줘야하는데,
이때 웹팩과 같은 모듈 번들러 라이브러리가 필요!
청크 / 캐시 / 코드 스플릿 개념들을 알아야함

Hook 함수
React Hooks은 리액트의 새로운 기능으로 React 16.8버전에 새로 추가된 기능으로 state, component에 대한 것들을 바꿔놓음
예를 들면 function component에서 state을 가질 수 있게 된 것
만일 앱을 react hook을 사용하여 만든다면 class component, render 등을 안해도 된다는 뜻
모든 것은 하나의 function이 되는 것 함수형 프로그래밍이 가능해지는 것